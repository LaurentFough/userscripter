#!/bin/bash

readonly ERROR_PREFIX=$'---- ERROR -----------------------------------------------------\n\n'
readonly INDENTATION="    "
readonly NODE="Node.js"
readonly NPM="npm"
readonly URL_NODE="https://nodejs.org"
readonly DIR_NODE_MODULES="node_modules"
readonly DIR_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly DIR_SRC="src"
readonly DIR_USERSCRIPTER=".userscripter"
readonly DIR_BUILD="$DIR_USERSCRIPTER/build"
readonly DIR_EXAMPLE="$DIR_USERSCRIPTER/example"
readonly DIR_GIT=".git"
readonly MSG_TRY_THIS=$'You can try this to fix this problem:\n'
readonly CMD_INSTALL="npm install"
readonly CMD_REBUILD="npm rebuild"
readonly CMD_DELETE_NODE_MODULES="rm -rf node_modules"
readonly CMD_BUILD="./build"
readonly CMD_REPLACE="$DIR_NODE_MODULES/.bin/replace"
readonly CONFIRMATION_ANSWER="Please answer 'y' or 'n'."
readonly FILE_GITIGNORE=".gitignore"
readonly ARGUMENT_EXAMPLE="--example"
readonly ARGUMENT_HELP="--help"
readonly URL_REPO="https://github.com/SimonAlling/userscripter"
readonly REMOTE_USERSCRIPTER="userscripter"

cd "$DIR_ROOT"

shopt -s globstar

function abort() {
    echo
    echo "Initialization canceled. No files were modified."
    exit 0
}

function echoFilesToOverwrite() {
    for f in "$DIR_EXAMPLE"/**; do
        filename="${f//$DIR_EXAMPLE\//}"
        if [ -f "$DIR_SRC/$filename" ]; then
            echo "$INDENTATION$filename"
        fi
    done
}

function printRepoHelp() {
    echo "Enter the URL of the Git repo for your userscript. Examples:"
    echo
    echo "$INDENTATION""HTTPS:"
    echo "$INDENTATION""https://github.com/JohnSmith/example-userscript"
    echo
    echo "$INDENTATION""SSH:"
    echo "$INDENTATION""git@github.com:JohnSmith/example-userscript"
    echo
}

function setupGitRepo() {
    if [ "$(type git)" == "" ]; then
        echo "git not found. Skipping this step."
        echo
    else
        echo
        echo "Setting up Git repository ..."
        # Delete .git and initialize new repo:
        rm -rf "$DIR_GIT" && git init && git add . && git commit -m "Initial commit"
        if [ $? -gt 0 ]; then
            echo "Failed to set up Git repository."
            echo
            exit 50
        fi
        echo
        # Set up userscripter remote:
        remotes_userscripter=$(git remote -v | grep "^$REMOTE_USERSCRIPTER\s" | wc -l)
        if [ ! "$remotes_userscripter" == "0" ]; then
            git remote rm "$REMOTE_USERSCRIPTER"
        fi
        git remote add            "$REMOTE_USERSCRIPTER" "$URL_REPO"
        git remote set-url --push "$REMOTE_USERSCRIPTER" "FETCH_ONLY"
        # Prepare origin:
        remotes_origin=$(git remote -v | grep "^origin\s" | wc -l)
        if [ ! "$remotes_origin" == "0" ]; then
            git remote rm origin
        fi
        # Ask for origin:
        while true; do
            read -p "Please enter a repository URL or '?' for help: " choice
            case "$choice" in
                "?" ) printRepoHelp;;
                "" ) ;;
                * ) echo
                    echo "Setting origin to $choice ..."
                    git remote add origin "$choice"
                    if [ $? -eq 0 ]; then
                        echo "Done. These are your Git remotes:"
                    else
                        echo "Failed to set origin. These are your Git remotes:"
                    fi
                    echo
                    git remote -v
                    echo
                    break;;
            esac
        done
    fi
}

# Help message:
if [ "$1" == "$ARGUMENT_HELP" ]; then
    echo "Usage: init [$ARGUMENT_EXAMPLE]"
    echo
    echo "Options:"
    echo "$INDENTATION""$ARGUMENT_EXAMPLE      Include example code"
    echo
    echo "This script initializes a new userscript by creating a boilerplate code base"
    echo "in $DIR_SRC/. Any existing files are overwritten."
    echo
    echo "If the $ARGUMENT_EXAMPLE flag is used, some example code is included."
    exit 0
fi


# Check if Node.js exists:
if [ "$(type node)" == "" ]; then
    echo
    echo "$ERROR_PREFIX$NODE not found."
    echo
    echo "It seems that $NODE is not installed. You can find it here:"
    echo
    echo "$INDENTATION$URL_NODE"
    echo
    exit 10
fi

# Check if npm exists:
if [ "$(type npm)" == "" ]; then
    echo
    echo "$ERROR_PREFIX$NPM not found."
    echo
    echo "It seems that $NPM is not installed. You can try reinstalling $NODE to fix this problem. $NODE can be found here:"
    echo
    echo "$INDENTATION$URL_NODE"
    echo
    exit 10
fi

# Check if node_modules exists:
if [ ! -e $DIR_NODE_MODULES ]; then
    echo
    echo "$ERROR_PREFIX$DIR_NODE_MODULES/ not found."
    echo
    echo "I couldn't find $DIR_NODE_MODULES/ in this directory. This probably means that the necessary dependencies are not installed."
    echo
    echo "$MSG_TRY_THIS"
    echo "$INDENTATION$CMD_INSTALL"
    echo
    exit 11
fi


if [ "$1" == "$ARGUMENT_EXAMPLE" ]; then
    echo "Initializing userscript with example code ..."
else
    echo "Initializing clean userscript ..."
fi

if [ -e "$DIR_SRC" ] && [ ! -z "$(ls -A $DIR_SRC)" ]; then
    # Source directory exists and has some content.
    echo
    echo "WARNING! These files in $DIR_SRC/ will be overwritten:"
    echo
    echoFilesToOverwrite
    echo
    while true; do
        read -p "Are you sure you want to do this (y/N)? " choice
        case "$choice" in 
          y|Y ) break;;
          n|N ) abort;;
          "" ) abort;;
          * ) echo "$CONFIRMATION_ANSWER";;
        esac
    done

    while true; do
        read -p "I will ask again, since this cannot be undone. Are you sure (y/N)? " choice
        case "$choice" in 
          y|Y ) break;;
          n|N ) abort;;
          "" ) abort;;
          * ) echo "$CONFIRMATION_ANSWER";;
        esac
    done
fi

if [ ! -e "$DIR_SRC" ]; then
    mkdir "$DIR_SRC"
fi


echo
argumentToInit=""
if [ "$1" == "$ARGUMENT_EXAMPLE" ]; then
    echo "Creating example code base in $DIR_SRC/ ..."
    argumentToInit="$ARGUMENT_EXAMPLE"
else
    echo "Creating clean code base in $DIR_SRC/ ..."
fi


cp -r --force "$DIR_EXAMPLE"/* "$DIR_SRC"

for f in "$DIR_EXAMPLE"/**; do
    if [ ! -d "$f" ]; then
        file_dest="${f/$DIR_EXAMPLE/$DIR_SRC}"
        cat "$f" | node "$DIR_BUILD/init.js" "$argumentToInit" > "$file_dest"
        if [ $? -gt 0 ]; then
            echo
            echo "$ERROR_PREFIX""Failed to create $file_dest."
            echo
            echo "$MSG_TRY_THIS"
            echo "$INDENTATION$CMD_INSTALL"
            echo
            echo "If that doesn't work, you can try this:"
            echo
            echo "$INDENTATION$CMD_REBUILD"
            echo
            echo "And if that doesn't work, you can try this:"
            echo
            echo "$INDENTATION$CMD_DELETE_NODE_MODULES"
            echo "$INDENTATION$CMD_INSTALL"
            echo
            exit 30
        else
            if [ ! -s "$file_dest" ]; then
                rm "$file_dest"
            else
                echo "$INDENTATION""$file_dest"
            fi
        fi
    fi
done


# Update .gitignore:
if [ $? -eq 0 ]; then
    echo
    echo "Updating $FILE_GITIGNORE ..."
    if [ ! -f "FILE_GITIGNORE" ]; then
        "$CMD_REPLACE" "\r?\n$DIR_SRC$" "" "$FILE_GITIGNORE" > /dev/null
    else
        echo "$FILE_GITIGNORE not found; skipping this step."
        echo
    fi
    if [ $? -gt 0 ]; then
        echo
        echo "$ERROR_PREFIX""Failed to update $FILE_GITIGNORE."
        echo
        exit 40
    else
        echo "Done."
        echo
    fi
fi


# Set up Git remotes:
while true; do
    read -p "Would you like to set up a Git repository for your userscript (y/n)? " choice
    case "$choice" in
      y|Y ) setupGitRepo; break;;
      n|N ) break;;
      * ) echo "$CONFIRMATION_ANSWER";;
    esac
done


if [ $? -eq 0 ]; then
    echo
    echo "Initialization done!"
    echo
    echo "Run this to build the userscript:"
    echo
    echo "$INDENTATION$CMD_BUILD"
fi
